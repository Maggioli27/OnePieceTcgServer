// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OnePieceTcg.DAL.Data;

#nullable disable

namespace OnePieceTcg.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OnePieceTcg.Domain.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CardSetId")
                        .HasColumnType("integer");

                    b.Property<int?>("CardTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("ColorId")
                        .HasColumnType("integer");

                    b.Property<int>("Cost")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RarityId")
                        .HasColumnType("integer");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SpecialRarityId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CardSetId");

                    b.HasIndex("CardTypeId");

                    b.HasIndex("ColorId");

                    b.HasIndex("RarityId");

                    b.HasIndex("SpecialRarityId");

                    b.HasIndex("UserId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("OnePieceTcg.Domain.Models.CardLine", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("integer");

                    b.Property<int>("LineId")
                        .HasColumnType("integer");

                    b.HasKey("CardId", "LineId");

                    b.HasIndex("LineId");

                    b.ToTable("CardLine");
                });

            modelBuilder.Entity("OnePieceTcg.Domain.Models.CardSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CardSets");
                });

            modelBuilder.Entity("OnePieceTcg.Domain.Models.CardType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CardTypes");
                });

            modelBuilder.Entity("OnePieceTcg.Domain.Models.CollectionCard", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("CardId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "CardId");

                    b.HasIndex("CardId");

                    b.ToTable("CollectionCards");
                });

            modelBuilder.Entity("OnePieceTcg.Domain.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("OnePieceTcg.Domain.Models.FavoriteCard", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("CardId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "CardId");

                    b.HasIndex("CardId");

                    b.ToTable("FavoriteCards");
                });

            modelBuilder.Entity("OnePieceTcg.Domain.Models.Line", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Line");
                });

            modelBuilder.Entity("OnePieceTcg.Domain.Models.Rarity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Rarities");
                });

            modelBuilder.Entity("OnePieceTcg.Domain.Models.SpecialRarity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SpecialRarities");
                });

            modelBuilder.Entity("OnePieceTcg.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OnePieceTcg.Domain.Models.Card", b =>
                {
                    b.HasOne("OnePieceTcg.Domain.Models.CardSet", "CardSet")
                        .WithMany("Cards")
                        .HasForeignKey("CardSetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnePieceTcg.Domain.Models.CardType", "CardType")
                        .WithMany("Cards")
                        .HasForeignKey("CardTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnePieceTcg.Domain.Models.Color", "Color")
                        .WithMany("Cards")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnePieceTcg.Domain.Models.Rarity", "Rarity")
                        .WithMany("Cards")
                        .HasForeignKey("RarityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnePieceTcg.Domain.Models.SpecialRarity", "SpecialRarity")
                        .WithMany("Cards")
                        .HasForeignKey("SpecialRarityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnePieceTcg.Domain.Models.User", null)
                        .WithMany("cards")
                        .HasForeignKey("UserId");

                    b.Navigation("CardSet");

                    b.Navigation("CardType");

                    b.Navigation("Color");

                    b.Navigation("Rarity");

                    b.Navigation("SpecialRarity");
                });

            modelBuilder.Entity("OnePieceTcg.Domain.Models.CardLine", b =>
                {
                    b.HasOne("OnePieceTcg.Domain.Models.Card", "Card")
                        .WithMany("CardLines")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnePieceTcg.Domain.Models.Line", "Line")
                        .WithMany("CardLines")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Line");
                });

            modelBuilder.Entity("OnePieceTcg.Domain.Models.CollectionCard", b =>
                {
                    b.HasOne("OnePieceTcg.Domain.Models.Card", "Card")
                        .WithMany("CollectionCards")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnePieceTcg.Domain.Models.User", "User")
                        .WithMany("Collections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnePieceTcg.Domain.Models.FavoriteCard", b =>
                {
                    b.HasOne("OnePieceTcg.Domain.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnePieceTcg.Domain.Models.User", "User")
                        .WithMany("FavoriteCards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnePieceTcg.Domain.Models.Card", b =>
                {
                    b.Navigation("CardLines");

                    b.Navigation("CollectionCards");
                });

            modelBuilder.Entity("OnePieceTcg.Domain.Models.CardSet", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("OnePieceTcg.Domain.Models.CardType", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("OnePieceTcg.Domain.Models.Color", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("OnePieceTcg.Domain.Models.Line", b =>
                {
                    b.Navigation("CardLines");
                });

            modelBuilder.Entity("OnePieceTcg.Domain.Models.Rarity", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("OnePieceTcg.Domain.Models.SpecialRarity", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("OnePieceTcg.Domain.Models.User", b =>
                {
                    b.Navigation("Collections");

                    b.Navigation("FavoriteCards");

                    b.Navigation("cards");
                });
#pragma warning restore 612, 618
        }
    }
}
